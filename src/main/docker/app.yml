# This configuration is intended for development purpose, it's **your** responsibility to harden it for production
version: '3.8'
services:
  app:
    image: blog
    environment:
      - _JAVA_OPTIONS=-Xmx512m -Xms256m
      - SPRING_PROFILES_ACTIVE=prod,api-docs
      - MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED=true
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql:5432/blog
      - SPRING_LIQUIBASE_URL=jdbc:postgresql://postgresql:5432/blog
      # Configuración para enviar logs a Logstash según la teoría
      - SPRING_OUTPUT_ANSI_ENABLED=ALWAYS
      - LOGGING_LEVEL_ROOT=INFO
      - LOGGING_LEVEL_COM_JHIPSTER_DEMO_BLOG=INFO
      - LOGGING_LEVEL_COM_JHIPSTER_DEMO_BLOG_WEB_REST=INFO
      - JHIPSTER_LOGGING_LEVEL_ROOT=INFO
      - JHIPSTER_LOGGING_LEVEL_COM_JHIPSTER_DEMO_BLOG=INFO
      - JHIPSTER_LOGGING_LOGSTASH_ENABLED=true
      - JHIPSTER_LOGGING_LOGSTASH_HOST=logstash
      - JHIPSTER_LOGGING_LOGSTASH_PORT=5000
      - JHIPSTER_LOGGING_LOGSTASH_QUEUE_SIZE=512
      - JHIPSTER_CORS_ALLOWED_ORIGINS=http://localhost:8100,http://localhost:9000,http://localhost:3000
      - JHIPSTER_CORS_ALLOWED_METHODS=*
      - JHIPSTER_CORS_ALLOWED_HEADERS=*
      - JHIPSTER_CORS_ALLOW_CREDENTIALS=true
    ports:
      - 127.0.0.1:8080:8080
    healthcheck:
      test:
        - CMD
        - curl
        - -f
        - http://localhost:8080/management/health
      interval: 5s
      timeout: 5s
      retries: 40
    depends_on:
      postgresql:
        condition: service_healthy
      logstash:
        condition: service_started
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  postgresql:
    extends:
      file: ./postgresql.yml
      service: postgresql

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    environment:
      - discovery.type=single-node
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
      - xpack.security.enabled=false
    ports:
      - 127.0.0.1:9200:9200
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data/
      - ./elasticsearch-config:/usr/share/elasticsearch/config/templates/
    healthcheck:
      test: curl -s http://localhost:9200 >/dev/null || exit 1
      interval: 10s
      timeout: 10s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.0
    volumes:
      - ./logstash-config/:/usr/share/logstash/pipeline/
    environment:
      - 'LS_JAVA_OPTS=-Xms256m -Xmx256m'
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
    ports:
      - 127.0.0.1:5000:5000
      - 127.0.0.1:5044:5044
    depends_on:
      elasticsearch:
        condition: service_healthy

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - 127.0.0.1:5601:5601
    depends_on:
      elasticsearch:
        condition: service_healthy

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.0
    user: root
    volumes:
      - ./filebeat-config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      logstash:
        condition: service_started
    command: filebeat -e -strict.perms=false

  jenkins:
    image: jenkins/jenkins:jdk21
    ports:
      - 49001:8080
      - 50000:50000
    environment:
      - APP_HOST=app
      - APP_PORT=8080
      - DB_HOST=postgresql
      - JENKINS_OPTS="--prefix=/jenkins"
      # Add Cypress cache configuration
      - CYPRESS_CACHE_FOLDER=/var/jenkins_home/.cache/Cypress
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
    user: root # Temporarily switch to root to install dependencies
    command: |
      sh -c '
        apt-get update && 
        apt-get install -y libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libasound2 libxtst6 xauth xvfb && 
        chown -R jenkins:jenkins /var/jenkins_home && 
        su jenkins -c "jenkins-agent"
      '

volumes:
  elasticsearch-data:
  jenkins_home:
